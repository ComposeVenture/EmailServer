const DATABASESAVER=(DATABASE,NAME,LOCAL,STORE,callback)=>{GETDATA(DATABASE,NAME,(data)=>{const DATA={"Name":LOCAL,"Data":data};STOREINDEXED(LOCAL,STORE,DATA,(response)=>{callback(response);return;});});};
const DATABASEUPDATER=(DATABASE,NAME,LOCAL,STORE)=>{GETDATA(DATABASE,NAME,(data)=>{const DATA={"Name":LOCAL,"Data":data};UPDATEINDEXED(LOCAL,STORE,DATA);return});};
const DATAGETTER=(DATABASENAME,STORENAME,callback)=>{GETINDEXED(DATABASENAME,STORENAME,(data)=>{REDUX(data,(element)=>{REDUX(element.Data,(Element)=>{callback(Element);return;});});});};
const APPLOADUPDATER=(NAME)=>{fetch('https://script.google.com/macros/s/AKfycby5S_I3_hu6iEB0n8I7cmFZ9liA1kGPpQ-9ewmTcJmkUuMCYY540oaGDwJGE4ADs6tv5w/exec',{method:"Post",mode:"cors",body:JSON.stringify({"spreadsheetUrl":"https://docs.google.com/spreadsheets/d/1kd15tCp1cX6TIUSsm3GcrfxDvOrmqlTNxAaseR8LBhw/edit?gid=0#gid=0","sheetName":"AppManager"})}).then(res=>res.json()).then(data =>{data.forEach(element => {if (element.ProjectName === NAME ) {localStorage.setItem('AppFunctions',element.Functions);localStorage.setItem('AppStyles',element.Styles);localStorage.setItem('AppIcon',element.AppIcons);fetch('https://script.google.com/macros/s/AKfycby5S_I3_hu6iEB0n8I7cmFZ9liA1kGPpQ-9ewmTcJmkUuMCYY540oaGDwJGE4ADs6tv5w/exec',{method:"Post",mode:"cors",body:JSON.stringify({"spreadsheetUrl":"https://docs.google.com/spreadsheets/d/1kd15tCp1cX6TIUSsm3GcrfxDvOrmqlTNxAaseR8LBhw/edit?gid=0#gid=0","sheetName":"CloudShipping"})}).then(res=>res.json()).then(datata =>{datata.forEach(element => {localStorage.setItem('Functions',element.Functions);localStorage.setItem('Styles',element.Styles);localStorage.setItem('Plugins',element.Plugins);localStorage.setItem('Templates',element.Templates);localStorage.setItem('TemplateStyles',element.TemplateStyles);localStorage.setItem('TemplateFunctions',element.TemplateFunctions);localStorage.setItem('Colors',element.Colors);localStorage.setItem('Classes',element.Classes);localStorage.setItem('Components',element.Components);localStorage.setItem('Json',element.Json);localStorage.setItem('Links',element.Links);localStorage.setItem('Constants',element.Constants);localStorage.setItem('Library',element.Library);localStorage.setItem('Module',element.Module);localStorage.setItem('Assets',element.Assets);localStorage.setItem('Icons',element.Icons);localStorage.setItem('Apis',element.Apis);localStorage.setItem('CloudFunctions',element.CloudFunctions);localStorage.setItem('CloudStyles',element.CloudStyles);localStorage.setItem('ModulesUpdated','Updated');}); }).catch(error=>{console.log(error);});};});}).catch(error=>{console.log(error);});}
let LAT; let LONG; const CURRENTLOCATION = (callback) => { const USERDATA = { "Latitude": LAT, "Longitude": LONG }; if (localStorage.getItem('Environment') === 'Production') { LOCATIONACCESS(); Promise.all([ new Promise((resolve) => { GETLATITUDE((data) => { LAT = data; console.log(`Latitude retrieved: ${LAT}`); resolve(); }); }), new Promise((resolve) => { GETLONGITUDE((data) => { LONG = data; console.log(`Longitude retrieved: ${LONG}`); resolve(); }); }) ]).then(() => { callback({ "Latitude": LAT, "Longitude": LONG }); }).catch((error) => { console.error('Error retrieving coordinates:', error); }); } else { if (navigator.geolocation) { navigator.geolocation.getCurrentPosition((position) => { const latitude = position.coords.latitude; const longitude = position.coords.longitude; console.log(`Geolocation retrieved: ${latitude}, ${longitude}`); callback({ "Latitude": latitude, "Longitude": longitude }); }, (error) => { let errorMessage = ''; switch (error.code) { case error.PERMISSION_DENIED: errorMessage = "User denied the request for Geolocation."; break; case error.POSITION_UNAVAILABLE: errorMessage = "Location information is unavailable."; break; case error.TIMEOUT: errorMessage = "The request to get user location timed out."; break; case error.UNKNOWN_ERROR: errorMessage = "An unknown error occurred."; break; } console.log(errorMessage); if (typeof TOAST === "function") { TOAST(errorMessage); } }); } else { const message = "Geolocation is not supported by this browser."; console.log(message); if (typeof TOAST === "function") { TOAST(message); } } } };